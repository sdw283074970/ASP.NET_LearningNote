//Q: 什么是API？
//A: 要理解什么是API就要先理解ASP.NET MVC架构的运作原理。完成一次客户端到服务器的交互流程如下：
  //1.客户端向服务端发送HTTP请求；
  //2.服务端识别HTTP请求，然后用对应控制器(Controllor)中的动作(Action)来对此次请求做处理；
  //3.Action在绝大多数情况下向用户返回一个由Razor引擎编译转换称HTML标记后的视图(View)。

  //在以上流程中，返回到客户端的HTML标记在由服务端生成的。但其实还有一种方法，即在用户端生成HTML标记文件。如果在用户端生成HTML文件，那么服务端就只用
    //向用户端返回一些未经处理过的粗数据(Raw Data)就可以了。

//Q: 为什么要在用户端生成HTML标记文件？
//A: 因为有很多好处。
  //第一，在客户端生成标记文件为服务端能节省大量资源(如内存)，这意味多出来的资源可以提升应用的表现；
  //第二，粗数据只要求更少的带宽，这意味着提升了传输速度和应用响应时间；
  //第三，粗数据可应用于多种不同的平台，如手机端、PC端等。

//Q: 为何粗数据能适应多种平台？
//A: 因为它们是粗数据，未经任何本地化处理，而如何将这些粗数据本地化将成为本地平台自己的职责，即需要建立一套本地化粗数据的规则，而这个规则对应服务器的
  //数据来源接口被称为数据服务(Data Services)，也被称为应用程序接口Application Programming Interface，即API。

  //即使不是跨平台的数据转换，就Web本身而言，不同的网站也可以解析相同的数据来源，即同一个API，来将这些数据在自己的网站中有自己的表达。如，很多论坛、
    //应用现在都免注册，直接使用QQ、微信、微博等登陆，这是因为这些论坛和应用使用了QQ、微信等平台开放的API来获取用户信息，通过解析这些平台传送的用户
    //粗数据来自动替用户完成注册。

//Q: API能干什么？
//A: API能提升用户体验。不仅是上例所述的通过其他平台的API获取用户信息让用户免注册，即获取粗数据，还能更改数据。

//Q: 如何搭建API？
//A: 在ASP.NET MVC中，搭建API使用的是ASP.NET Web API框架。这个框架是在ASP.NET MVC之后开发的，但是跟ASP.NET MVC的很多架构规则都相同。如路由、
  //控制器、动作、ActionResult的用法都相同。当然也有一些不同，在后面章节会讲到。在ASP.NET Core 1.0以后，微软将ASP.NET MVC和Web API框架都融合到了
  //一起，处于同一个框架中。

//Q: 用户端是如何通过API将数据本地化的？
//A: 首先，通过暴露的API可以获得粗数据，然后使用jQuery插件来做一些具体的事情。如使用一款叫DataTable的jQuery插件在用户端中来将这些粗数据整合成表，
  //还能对这些表进行分页(Pagination)、搜索(Searching)、排序(Sorting)等操作而不写任何额外的代码，因为插件都写好了。

//暂时想到这么多，最后更新2018/03/19
