//Q: 如何用jQuery调用API？
//A: 首先jQuery基础语法了解一下：

  //jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。
  //基础语法： $(selector).action()
  //美元符号$定义 jQuery
  //选择符（selector）"查询"和"查找" HTML 元素
  //jQuery 的 action() 执行对元素的操作
  
  //如以下实例：
  
$(this).hide() - 隐藏当前元素
$("p").hide() - 隐藏所有 <p> 元素
$("p.test").hide() - 隐藏所有 class="test" 的 <p> 元素
$("#test").hide() - 隐藏所有 id="test" 的元素
  
  //特别说明，可以发现绝大部分的jQuery都是以一个document ready函数开始的，这个函数如下：
  
$(document).ready(function(){
 
   // 开始写 jQuery 代码...
 
});

  //这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。简写语法如下：
  
$(function(){
 
   // 开始写 jQuery 代码...
 
});

  //选一个顺手的用就行。
  
//Q: 如何选取元素？
//A: 使用类似于CSS的元素选择器。如：
  
  //元素选择器：$("p")，在页面中选取所有 <p> 元素
  //#id选择器: $("#test")，在页面中选择id="test"的元素
  //.class选择器: $(".test")，在页面中选择class="test"的元素
  //更多实例：http://www.runoob.com/jquery/jquery-selectors.html
  
//Q: jQuery函数应该写在哪里？
//A: 写在<script></script>标签中。可以直接写，也可以通过<script>标签的scr属性引用，如：

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"> 
<title>题目</title> 
<script src="http://cdn.static.runoob.com/libs/jquery/1.10.2/jquery.min.js">    //在这里引用.js的脚本
</script>
<script>
//直接写jQuery
$(document).ready(function(){
  $("button").click(function(){
    $(".test").hide();
  });
});
</script>
</head>
<body>

<h2 class="test">这是一个标题</h2>
<p class="test">这是一个段落。</p>
<p>这是另外一个段落。</p>
<button>点我</button>
</body>
</html>

//Q: 为什么要用jQuery？
//A: jQuery 是为事件处理特别设计的。如：

$("p").click(function(){
    // 点击<p>元素后触发执行代码
});

  //而事件是用户与应用互动的基础，直接用JavaScript写事件将会很冗杂臃肿，可以说jQuery以轻量化的方式实现了应用的可操作性。
  
  //如，在Vidly中，我们有了数据库，有了页面和表格，可以通过jQuery很容易实现一些基本事件操作，如删除一个顾客信息。

//Q: 如何在ASP.NET应用中添加jQuery代码？
//A: 在视图文件cshtml中添加。在文件末尾输入以下代码：

@section scripts    //.NET会渲染代码块中的script标签
{
    <script>
        //这里手动添加jQuery
    </script>
}

  //或使用html辅助函数渲染指定项目中路径的js文档绑定包，如以下代码：

    @Scripts.Render("~/bundles/jquery")   //绑定包在App_Start/BundleConfigs.cs中设置
    @Scripts.Render("~/bundles/bootstrap")
      
//Q: 那么如何调用API？
//A: 使用异步JavaScript和XML(ajax)技术，即Asynchronous JavaScript and XML。ajax的功能是可以向服务器请求数据，即使是在网页已经加载好的情况下，
  //通常应用在事件上以实现动态的网页更新。如，在点击Delete按钮后，通知服务器调用DELETE方法的API来删除选中的客户，就要用到jQuery中与ajax有关的方法。
  //通过这些方法，我们可以向服务器发送HTTP请求并获得数据，并立刻将这些数据应用到网页元素中。
  
  //假设Vidly项目需求为为表格中的每一条客户记录添加一个DELETE按钮，按下这个按钮，浏览器能向服务器发送HTTP DELETE请求，删除数据库中的对应数据。
  //关键代码如下：
      
<div>
    <div>
        <table id="customers" class="table table-bordered table-hover">   //为这个表设定id，方便jQuery选择器选取
            <thead>
                <tr>
                    <th>Customer</th>
                    <th>Membership Type</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in Model)
                {
                    <tr>
                        <td>@Html.ActionLink(customer.Name, "Edit", "Customer", new { id = customer.Id})</td>
                        <td>@customer.MemberShipType.MemberShipTypeName</td>
                        <td>    //同样为button设定一个data-customer-id属性，并将button元素定义为js-delete类
                            <button data-customer-id="@customer.Id" class="btn btn-link js-delete">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section scripts
{
    <script>
        $(document).ready(function () {   //document ready函数，保证在DOM加载完毕后才启动脚本
            //选择id为customers的元素中类型为js-delete的所有子元素，即表中所有的DELETE按钮
            $("#customers .js-delete").on("click", function () {   //链式调用on()事件方法，为所选元素添加"click"事件，定义触发事件的行为
                var button = $(this);       //为触发"click"事件的当前元素声明引用
                if (confirm("Are u sure to delete?")) {   //如果在弹出的对话框中选择"是"，则执行ajax方法中的.ajax()方法，即执行异步ajax请求
                    $.ajax({    //内部“参数”语法为$.ajax({name:value, name:value, ... })，name可以有很多定义，参阅表https://bit.ly/2IexLrV
                        url: "/api/customers/" + button.attr("data-customer-id"),   //使用url定义，并声明其值，即DELETE请求的url
                        method: "DELETE",   //声明通过这个url执行的是RESTful应用程序接口中的DELETE方法
                        success: function () {    //声明如果请求成功则执行一个函数
                            button.parents("tr").remove();    //选择当前button的母体<tr>元素并yi'chu
                        }
                    })
                }
            });
        });
    </script>
}
      
